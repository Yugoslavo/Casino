@startuml
package com.example.myapplication {
    class Player {
        - name: String
        - money: Float
        - bet: Float
        - luck: Float
        + addMoney(money: Float): void
        + getInstance(context: Context): Player
        + destroyInstance(): void
    }



    class MainActivity {
        + onCreate(savedInstanceState: Bundle): void
    }

    class BanqueActivity {
        + Diminue(view: View): void
        + Augmente(view: View): void
        + ChangeValue50(view: View): void
        + ChangeValue25(view: View): void
        + ChangeValue15(view: View): void
        + getTextFromEditText(view: View): void
        + exit(view: View): void
    }


    
}
package com.example.myapplication.blackjack{

    class Initblackjack {
    - player: Player
    + onCreate(savedInstanceState: Bundle): void
    + startBlackJack(view: View): void
    + openBank(view: View): void
    + Back(view: View): void
    }
    class black_jack {
        - deck: List<Card>
        - playerHand: List<Card>
        - aiHand: List<Card>
        - playerHasStopped: Boolean
        - aiHasStopped: Boolean
        + playerStop(view: View): void
        + aiPlayTurn(): void
        + calculatePoints(hand: List<Card>): Int
    }
    
        class Card {
        + suit: String
        + rank: String
        + value: Int
        + imageResId: Int
    }
    

}

package com.example.myapplication.pyramid {
    class Ball {
        - isMoving: Boolean
        - radius: Float
        - gravity: Float
        - vSpeed: Float
        - hSpeed: Float
        + draw(canvas: Canvas, paint: Paint): void
        + move(elapsedTimeMS: Double): void
        + update(updateSpeed: (Float, Float) -> ((Float, Float) -> Array<Float>)): void
    }

    class PyramidActivity {
        + ballHit(x: Float, ballBet: Float): void
    }

    class PyramidView {
        - everyObjects: EveryObjects
        + addBall(bet: Float): void
        + updatePositions(elapsedTimeMS: Double): void
    }

    class EveryObjects {
        - ballList: List<Ball>
        - obstacleList: List<Obstacle>
    }

    interface Figure {
        + draw(canvas: Canvas, paint: Paint): void
    }

    interface Observer {
        + update(updateSpeed: (Float, Float) -> ((Float, Float) -> Array<Float>)): void
    }

    abstract class Obstacle {
        + draw(canvas: Canvas, paint: Paint): void
        + callObservers(): void
    }

    class RoundObstacle {
        + callObservers(): void
    }

    class Wall {
        + callObservers(): void
    }

    class Subject {
        - observers: List<Observer>
        + attach(obs: Observer): void
        + detach(obs: Observer): void
        + callObservers(): void
    }
}

package com.example.myapplication.slotmachine {
    interface Fruit {
        + getValue(count: Int): Float
    }

    class FruitNormal {
        + getValue(count: Int): Float
    }

    class Grenade {
        + getValue(count: Int): Float
    }

    class Durian {
        + getValue(count: Int): Float
    }

    class Dragon {
        + getValue(count: Int): Float
    }

    class SlotMachine {
        - fruits: Array<Fruit>
        + play(mise: Float): Float
    }

    class SlotMachineActivity {
        + openBank(): void
    }
}


Initblackjack --> Player
MainActivity --> Initblackjack
Initblackjack --> black_jack
Player --> PyramidActivity
Player --> SlotMachineActivity
Player --> BanqueActivity
PyramidActivity --> PyramidView
PyramidView --> EveryObjects
black_jack --* Card
EveryObjects --> Ball
EveryObjects --> Obstacle
Obstacle <|-- RoundObstacle
Obstacle <|-- Wall
Subject <|-- Obstacle
Observer <|.. Ball
Figure <|.. Ball
Figure <|.. Obstacle
SlotMachineActivity --> SlotMachine
SlotMachine --> Fruit
Fruit <|-- FruitNormal
Fruit <|-- Grenade
Fruit <|-- Durian
Fruit <|-- Dragon
@enduml
