/* je pars du principe que je reçois une liste de fruits après que le rouleau ait tourné --> listOf(fruit1,fruit2,fruit3)*/
/* je pars aussi du principe que la mise est donnée*/


/* AJOUTER REGLES?*/

class Jackpot(fruit : List<String>, mise : Double) : Double {
    return if (fruit[0]==fruit[1] && fruit[1]==fruit[2]) { 
    	println("JACKPOT")
        mise*2 
    }
}

class Grenades {
    fun PerdreGrenade (fruit : List<String>, mise : Double) : Double { 
    	val compteGrenade = fruit.count { it == "gfruit"}
    	return when (compteGrenade) { 
    		1 -> { 
        		println("Vous perdez 25% de votre mise.")
        		mise*0.75 
        	}
        	2 -> {
         	   println("Deux grenades ! Vous perdez 50% de votre mise.")
          	  mise*0.5  
       	 	}
        	3 -> {
            	println("Vous perdez toute votre mise.")
            	mise*0 
        	}
    	}
	}
}

    
    
class Durians {
    fun PerdreDurian(fruit : List<String>, mise: Double) : Double {
    	val compteDurian = fruit.count { it == "dfruit"}
    	return if (compteDurian == 1){ 
    		println("Vous perdez 25% de votre mise.")
        	mise*0.75 
        }
    }
}

class Mangue {
    fun GagnerMangue (fruit : List<String>, mise : Double) : Double { 
    	val compteMangue = fruit.count { it == "mfruit"}
    	return when (compteMangue) { 
    		1 -> { 
        		println("Vous augmentez votre mise de 25%.")
        		mise*1.25
        	}
        	2 -> {
         	   println("Vous augmentez votre mise de 50%.")
          	  mise*1.5  
       	 	}
        	3 -> {
            	println("MEGA JACKPOT!! Vous triplez votre mise.")
            	mise*3 /* du coupc c'est pas du polymorphisme*/
        	}
    	}
	}   
}
