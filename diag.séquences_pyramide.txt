@startuml
actor "Utilisateur" as User

participant "MainActivity" as MA
participant "PyramidActivity" as PA
participant "PyramidView" as PV
participant "Player" as Player
participant "BanqueActivity" as Bank
participant "Ball" as Ball
participant "Obstacle" as Obstacle

== Lancement ==
User -> MA: Lance l'application
User -> MA: Clique sur "Pyramide"
activate MA
MA -> PA: startActivity(Intent)
activate PA
deactivate MA

== Mise en place du jeu ==
PA -> Player: Player.getInstance(applicationContext)
activate Player
Player --> PA: instance Player
deactivate Player

activate PV
PA -> PV: Affiche la vue de la pyramide

PV -> Obstacle: Création des obstacles
activate Obstacle
note right of PA: Les obstacles sont créés et ajoutés \nà la liste interne (EveryObjects.obstacleList)

== Opérations au sein de la Banque ==
User -> PA:Clique sur "Banque"
PA -> Bank: startActivity(BanqueActivity)
activate Bank
Bank -> Player:Lit/change le solde actuel
Player-->>Bank:Donne le solde actuel
Bank -->> User:Affiche le solde actuel
deactivate Bank


== Lancement d'une partie ==

User -> PA: Clique sur "Mise"
User -> PA: Entre la mise
PA -> Player: Met à jour la mise


Player -->> User: Affiche la mise

alt Mise > montant en banque ou <0
    Player -> Player : bloque l'exécution
    Player-->> User:N'affiche aucune mise
    User -> PA: Entre une nouvelle  mise

else Mise = 0
    PA -> PA: Désactive le bouton "Play" (bouton non cliquable)
    User -> PA: Entre une nouvelle  mise

else Mise suffisante et différente de 0
    User -> PA: Clique sur "Play"
    PA -> PV: addBall(bet)
    PV -> Ball: EveryObjects.ballList.add(newBall)
    activate Ball
    note right of PV: Création d'une nouvelle balle avec la mise\n- Nouvelle instance Ball(bet, position aléatoire)\n- Attachement de la balle aux obstacles
    PV -> PV: newBall.isMoving = true
    PA -> Player: soustrait la mise
end
deactivate PA

== Boucle de jeu et résolution ==

PV -> Ball: move(elapsedTimeMS)
PV -> Obstacle: callObservers() [vérification collision]
note right of Obstacle: Pour chaque obstacle (RoundObstacle et Wall),\nSi collision, \ncalcul de la nouvelle vitesse (rebond)
Obstacle -> Ball: update(newSpeed)

alt Balle en bas de l'écran
    PV -> PA: ballHit(x, ball.bet)
    PA -> Player: addMoney(gain)
    activate Player
    deactivate Player
    PV -> Ball: Remove ball from ballList
    deactivate Ball
end


== Retour à l'accueil ==
User -> PA: Appuie sur "Retour"
activate PA
PA -> MA: finish(), retour au menu
activate MA
deactivate Obstacle
deactivate PA
deactivate PV
deactivate MA
@enduml